```{r}

```

---
title: "Consumer Behaviour Analysis"
subtitle: "INFO 523 - Project Final"
author: 
  - name: "Pattern Pioneers - Vishal, Joel, Pranshu, Shashwat, Bharath"
    affiliations:
      - name: "School of Information, University of Arizona"
description: ""
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
  warning: false
  echo: false
---

```{r install_packages, include=FALSE}
### GETTING THE LIBRARIES
if (!require(pacman))
  install.packages(pacman)

pacman::p_load(tidyverse,   # Data wrangling
               dlookr,      # Exploratory Data Analysis
               formattable, # Present neat table format
               gt,          # Alternating formatting for the tables
               gtsummary,
               here,
               nnet,
               janitor,
               corrplot,
               dplyr,
               caret,
               formattable)       # Summary for the tables
```

## Abstract

```{r read_data, include=FALSE}
# Using the original data
# Loading the csv into a variable using read_csv

data <- read_csv(here("data", "Amazon_Customer_Behavior_Survey.csv"))

# Removing unwanted column like "timestamp".
data <- data %>% 
  select(-Timestamp) %>%
  clean_names()
```

## Question 1

```{r new_df, include=FALSE}
# creating a new dataframe by selecting only the columns of our focus

new_df <-
  data %>% select(
    purchase_frequency,
    product_search_method,
    customer_reviews_importance,
    cart_abandonment_factors
  )
```

```{r get_outliers}
# getting some idea on the dataset by visualizing the outliers

new_df |>
    plot_outlier()

# Interpretation: There are not many outliers such that data transformation is needed for this data
```

```{r refactor_new_df, include=FALSE}
# modifying the column data type to factor and then to integer
new_df$purchase_frequency <- as.factor(new_df$purchase_frequency)
new_df$purchase_frequency <- as.integer(new_df$purchase_frequency)

unique(new_df$purchase_frequency)

# modifying the column data type to factor and then to integer
new_df$product_search_method <-
  as.factor(new_df$product_search_method)
new_df$product_search_method <-
  as.integer(new_df$product_search_method)

unique(new_df$product_search_method)

# modifying the column data type to factor and then to integer
new_df$cart_abandonment_factors <-
  as.factor(new_df$cart_abandonment_factors)
new_df$cart_abandonment_factors <-
  as.integer(new_df$cart_abandonment_factors)

unique(new_df$cart_abandonment_factors)

# modifying the column data type to factor and then to integer
new_df$customer_reviews_importance <-
  as.factor(new_df$customer_reviews_importance)
new_df$customer_reviews_importance <-
  as.integer(new_df$customer_reviews_importance)

unique(new_df$customer_reviews_importance)

# removing missing values from the dataframe
new_df = na.omit(new_df)
```

```{r correlation}
# creating correlation matrix using cor()
correlation_matrix <- cor(new_df)

# Display the correlation matrix
correlation_matrix
```

```{r corrplot}
# Visualize correlation matrix using corrplot

corrplot(correlation_matrix, method = "circle")
```

```{r bar_plot}
# generating plot product_search_method vs cart_abandonment_factors

data %>%
  select(product_search_method,
         cart_abandonment_factors) %>%
  # removing missing values
  na.omit() %>%
  # using ggplot to generate the plot
  ggplot(aes(y = cart_abandonment_factors, fill = product_search_method)) +
  # using geom_bar() to generate 100% bar plot
  geom_bar(position = "fill", width = 0.5, color = "black") +
  # scaling x axis to have percentage
  scale_x_continuous("Percentage in each category", 
                     labels = scales::percent,
                     expand = c(0, 0)) +
  # using viridis color scale - colorblind friendly
  scale_fill_viridis_d(option = 5, direction = -1) +
  labs(y = NULL, title = "") +
  theme_minimal(base_size = 20) # theme minimal
```

```{r traning_1, include=FALSE}
set.seed(123) # For reproducibility

# training the dataset by splitting the data to 80% training
train_index <-
  sample(1:nrow(new_df), 0.8 * nrow(new_df)) # 80% for training

# getting train and test data
train_data <- new_df[train_index,]
test_data <- new_df[-train_index,]

ncol(train_data)
```

```{r model}
# calling the nnet model with Cart_Abandonment_Factors and Product_Search_Method being our focus

model <- nnet(
  cart_abandonment_factors ~ product_search_method,
  data = train_data,
  size = 100,
  maxit = 1000
)
```

```{r predictions}
# generating predictions on the test data using the created model above
predictions <- predict(model, newdata = test_data)

# getting accuracy of our predictions
accuracy <-
  mean(predictions == test_data$cart_abandonment_factors) * 100

accuracy
```

## Question 2

```{r}
#Exploratory Data Analysis

data <- read_csv(here("data", "Amazon_Customer_Behavior_Survey.csv"))

# Check data structure
str(data)

# First 6 rows of dataframe

data |>
  head() |>
  formattable()


```

## Diagnosing data

```{r}
data |>
  diagnose() |>
  formattable()
```

```{r}
# Age distribution
ggplot(data, aes(x=age)) + geom_histogram(bins=30, fill="blue", color="black") +
  labs(title="Age Distribution", x="Age", y="Frequency")

# Gender distribution
ggplot(data, aes(x=Gender)) + geom_bar(fill="orange") +
  labs(title="Gender Distribution", x="Gender", y="Count")

```

```{r}
# Creating afe group based on age
data$age_group <- cut(data$age, breaks=c(0, 18, 25, 35, 45, 55, 65, 100),
                    labels=c('0-18', '19-25', '26-35', '36-45', '46-55', '56-65', '65+'))

```

```{r splitting purchase categories}
# We are going to split the rows having multiple purchase categories into multiple rows with same data in other columns but split up with respect to purchasing categories.
# Splitting 'Purchase_Categories'
df_expanded <- data %>%
  separate_rows(Purchase_Categories, sep=";") %>%
  rename(Purchase_Category = Purchase_Categories)

```

## Data Visualization

```{r plotting graphs for purchase category across age group and gender groups}
# Plotting a stacked barplot for representing purchase categories across different age groups
ggplot(df_expanded, aes(x=Purchase_Category, fill=age_group)) +
  geom_bar() +
  coord_flip() +
  labs(title="Purchase Categories Across Age Groups", x="Purchase Category", y="Count")

# Plotting a stacked barplot for representing purchase categories across different genders
ggplot(df_expanded, aes(x=Purchase_Category, fill=Gender)) +
  geom_bar() +
  coord_flip() +
  labs(title="Purchase Categories Across Genders", x="Purchase Category", y="Count")
```

### Applying a logistical regression model 

```{r}

# Preparing the data for logistic regression
df_expanded <- df_expanded |>
    mutate(Purchase_Category = ifelse(is.na(Purchase_Category), 
                                   NA, 
                                   tolower(gsub(" ", "_", Purchase_Category))))

unique_categories <- unique(df_expanded$Purchase_Category)
models <- list()
reports <- list()
```

```{r}
for (category in unique_categories) {
  # Binary variable for each category
  df_expanded[[category]] <- ifelse(df_expanded$Purchase_Category == category, 1, 0)
  
  # Model
  model_formula <- as.formula(paste(category, "~ age_group + Gender"))
  model <- multinom(model_formula, data=df_expanded)
  
  # Store the model
  models[[category]] <- model
  
  # Evaluation
  predictions <- predict(model, df_expanded)
  reports[[category]] <- confusionMatrix(data=factor(predictions, levels=c(0,1)), 
                                         reference=factor(df_expanded[[category]], levels=c(0,1)))
}

# Displaying the report for an example category
print(reports[[unique_categories[1]]])
```
